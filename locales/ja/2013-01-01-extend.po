# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-02-10 09:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:4
#, no-wrap
msgid ""
"layout: chapter\n"
"title: Running C in Ruby\n"
"---\n"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:7
msgid "## Compiling ##"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:11
msgid ""
"Compiling C code to be loaded as a Ruby extension requires some fancy "
"compiler options. Ruby's [`mkmf` stdlib][mkmf] makes it easy to do this by "
"generating an appropriate makefile for you."
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:13
msgid "### Preparation ###"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:15
msgid "First create the file `extconf.rb` in the same directory as your C code:"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:19
msgid "{% highlight ruby %} {% include extend/ext/extconf.rb %} {% endhighlight %}"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:22
msgid ""
"The preparation section should perform actions similar to the standard UNIX "
"[`configure` script][conf] e.g."
msgstr ""

#. type: Bullet: '* '
#: _posts/2013-01-01-extend.markdown:26
#, markdown-text
msgid "Check features of the current platform"
msgstr ""

#. type: Bullet: '* '
#: _posts/2013-01-01-extend.markdown:26
#, markdown-text
msgid "Check for existence of required libraries and functions"
msgstr ""

#. type: Bullet: '* '
#: _posts/2013-01-01-extend.markdown:26
#, markdown-text
msgid "Check for programs needed for building"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:28
msgid "[conf]: http://en.wikipedia.org/wiki/Configure_script"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:32
msgid ""
"The most common of these actions are provided by `mkmf` (but you have all of "
"Ruby at your disposal if you need it). For example, an extension which uses "
"SDL2 and needs to know how big `int`s are might call:"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:36
msgid "{% highlight ruby %} {% include extend/ext/exex.rb %} {% endhighlight %}"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:40
msgid ""
"`create_header` creates the file `extconf.h` containing preprocessor "
"definitions based on the results of the `mkmf` functions you called "
"previously. For this example, `extconf.h` might contain"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:44
msgid "{% highlight c %} {% include extend/ext/exh.h %} {% endhighlight %}"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:52
msgid ""
"This header should be included in your C files so that you can adapt your "
"code to a variety of platforms. Note that you can and should abort the "
"`extconf.rb` script if a `mkmf` function returns a value that indicates that "
"the build will fail. For example, if SDL2 is a _requirement_ of your "
"extension you should exit with some meaningful error message if "
"`have_library('SDL2')` returns `false`.  This is preferred to generating the "
"Makefile anyway and leaving the user with an opaque compiler error."
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:57
msgid ""
"`create_makefile` obviously creates the Makefile, but its argument is "
"especially important: it defines the entry point of your C code, the name of "
"the compiled library, and thus the argument for `require` in Ruby! This "
"should be the name of your extension."
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:63
msgid ""
"You can modify a few of the generated Makefile variables by modifying the "
"corresponding globals in Ruby: `$CFLAGS`, `$CPPFLAGS`, and "
"`$LDFLAGS`[^glob].  You can also use the `$objs` global to define a list of "
"object files for the Makefile if its method of automatically generating "
"targets doesn't work for your extension."
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:68
msgid ""
"All of the `mkmf` functions and their options are well-documented "
"[online][mkmf]. In addition to the functions for generating `extconf.h`, "
"there are a variety of functions for handling different source file layouts, "
"different file dependencies, etc."
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:70
msgid "[mkmf]: http://www.ruby-doc.org/stdlib/libdoc/mkmf/rdoc/MakeMakefile.html"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:72
msgid "### Execution ###"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:74
msgid "The rest couldn't be simpler"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:79
msgid "{% highlight shell_session %} $ ruby extconf.rb $ make {% endhighlight %}"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:81
msgid "[^argv]But of course that won't do anything without some C code to compile."
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:83
msgid "## Init ##"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:89
msgid ""
"In your C code, you'll want to include `ruby.h` to access the API. Other "
"than that the only requirement is to define a function for the Ruby VM to "
"call when your library is `require`d. The name of the function is determined "
"by the argument you passed to `create_makefile` in `extconf.rb`. We used "
"\"foobar\" in our example, so we'll create `foobar.c` containing"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:93
msgid "{% highlight c %} {% include extend/ext/foobar.c %} {% endhighlight %}"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:95
msgid "### Filenames ###"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:101
msgid ""
"If your extension has only a single C file, you should name it after your "
"extension as we did above. If your extensions has multiple C files _do not_ "
"name any of them after your extension. This is because the Makefile may "
"generate a `.o` file named after your extension for the linking stage, which "
"would cause a conflict if you also have a `.c` file which compiles to that "
"filename."
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:104
msgid ""
"Also avoid naming any files `conftest.c` as this file may be written to by "
"`mkmf`."
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:106
msgid "## Success ##"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:111
msgid ""
"Now make should compile a `.so` (or some other library) file which you can "
"`require` in Ruby. You can fill in your `Init` function with plain C code, "
"but you'll probably want to go back and learn about the [C API](../c) to do "
"more interesting stuff."
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:113
msgid "## Gem ##"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:118
msgid ""
"After you've got your extension working nicely, you may want to bundle it up "
"as an easily distributable Ruby gem. rubygems.org has a [detailed "
"guide][rbg] on creating gems, but as far as C extensions go you just need to "
"tell the spec about `extconf.rb`[^rbg]:"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:122
msgid "{% highlight ruby %} {% include extend/foobar.gemspec %} {% endhighlight %}"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:125
msgid ""
"If your gem includes multiple independent extensions, you can organize them "
"in subdirectories of `ext/` and pass all of the `extconf.rb`s to the spec."
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:127
msgid "[rbg]: http://guides.rubygems.org/make-your-own-gem/"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:129
msgid "## Footnotes ##"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:131
msgid "[^glob]: Check the [official documentation][globals]."
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:135
#, no-wrap
msgid ""
"[^argv]: The official documentation [hints][makefile] that `mkmf` parses "
"certain\n"
"         command line flags e.g.  `--vendor`. But I can't find this "
"documented\n"
"         anywhere.\n"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:137
msgid ""
"[^rbg]: "
"[http://guides.rubygems.org/gems-with-extensions/](http://guides.rubygems.org/gems-with-extensions/)"
msgstr ""

#. type: Plain text
#: _posts/2013-01-01-extend.markdown:139
msgid ""
"[globals]: "
"https://github.com/ruby/ruby/blob/master/doc/extension.rdoc#label-Prepare+extconf.rb "
"[makefile]: "
"https://github.com/ruby/ruby/blob/master/doc/extension.rdoc#label-Generate+Makefile"
msgstr ""
