# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-02-10 09:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:4
#, no-wrap
msgid ""
"layout: chapter\n"
"title: Examples\n"
"---\n"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:7
msgid "## Running Ruby in C ##"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:14
msgid ""
"This example is a simple little game of tag. In the game there are two "
"squares: the blue square is controlled using the arrow keys on the keyboard "
"while the red square is controlled by a Ruby script. To make this work, "
"we'll use the C API to define a little Ruby API that the script can access, "
"and every couple of frames we'll call a method defined in the Ruby script "
"and pass objects encapsulating the data for the two squares."
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:16
msgid "The Ruby script can look something like this:"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:20
msgid "{% highlight ruby %} {% include examples/ai.rb %} {% endhighlight %}"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:24
msgid ""
"The C code uses SDL2 for graphics and input and uses `stat()` (which may not "
"be very portable) to hot-reload the AI script whenever the file is changed "
". Here's `tag.c`:"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:28
msgid "{% highlight c %} {% include examples/tag.c %} {% endhighlight %}"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:30
msgid "The Makefile is nothing special:"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:34
msgid "{% highlight make %} {% include examples/Makefile %} {% endhighlight %}"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:36
msgid "## Running C in Ruby ##"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:42
msgid ""
"This example is a Ruby C extension that wraps the [GMP][gmp] C library for "
"arbitrary precision arithmetic. This is far from a complete example: it only "
"wraps the integer functions, implements only the basic functionality of the "
"library, and doesn't bother nicely integrating with Ruby's existing numeric "
"types. If you want a _really_ full example, check out the [GMP gem][gem]."
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:45
msgid "[gmp]: https://gmplib.org/ [gem]: https://github.com/srawlins/gmp"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:47
msgid "Everything is in `gmp.c` where we define our `GMP::Integer` class:"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:51
msgid "{% highlight c %} {% include examples/ext/gmp.c %} {% endhighlight %}"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:53
msgid "The `extconf.rb` is really simple."
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:57
msgid ""
"{% highlight ruby %} {% include examples/ext/extconf.rb %} {% endhighlight "
"%}"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:59
msgid "And now you can finally find out what your name means in base 62:"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:63
msgid "{% highlight ruby %} {% include examples/gmp_ex.rb %} {% endhighlight %}"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:70
msgid ""
"For this example I tried to do everything in C, but practically that isn't "
"necessary (or desirable). If one of your C methods just calls a bunch of API "
"functions (like `to_i` and `==` in the example), you're probably only saving "
"yourself a couple CPU cycles compared to implementing the method in "
"Ruby. And of course that comes at the cost of needing to spend more time "
"writing C and less time writing Ruby. ð"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:75
msgid ""
"A common convention when writing extensions is to only implement the "
"\"meat\" of the extension in C and to do everything else in a regular Ruby "
"script that pulls in the compiled library. For example, we could have "
"written a `gmp.rb` script to significantly simplify our extension:"
msgstr ""

#. type: Plain text
#: _posts/2014-01-01-examples.markdown:78
msgid "{% highlight ruby %} {% include examples/gmp.rb %} {% endhighlight %}"
msgstr ""
