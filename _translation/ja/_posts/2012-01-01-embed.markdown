---
layout: chapter
title: CでRubyを実行する
---

## コンパイルする ##

Embedding Ruby requires one header `ruby.h`, which includes a
platform-specific header `ruby/config.h`. You will probably need to tell
your compiler about the include paths for these headers. You will also need
to link with the Ruby lib.  On my machine, my minimal compiler options are:

{% highlight shell_session %}
$ gcc foo.c -I/usr/include/ruby-{{ site.rbversion }}.0
-I/usr/include/ruby-{{ site.rbversion }}.0/x86_64-linux -lruby
{% endhighlight %}

If available, you can use `pkg-config` to get the appropriate options for
your OS:

{% highlight shell_session %}
$ pkg-config --cflags --libs ruby-{{ site.rbversion }}
{% endhighlight %}

Those approaches might not work if Ruby is installed in a nonstandard
location on your machine or your OS does not provide standard header/library
directories.  A more robust approach is to ask Ruby itself where things are
and to set up the run-time library path:

{% highlight ruby %} #!/usr/bin/env ruby require 'shellwords'

# location of ruby.h
hdrdir = Shellwords.escape RbConfig::CONFIG["rubyhdrdir"]
# location of ruby/config.h
archhdrdir = Shellwords.escape RbConfig::CONFIG["rubyarchhdrdir"]
# location of libruby
libdir = Shellwords.escape RbConfig::CONFIG["libdir"]

# args for GCC
puts "-I#{hdrdir} -I#{archhdrdir} -L#{libdir} -Wl,-rpath,#{libdir}" {%
endhighlight %}

### Windows

On Windows, I highly recommend using the
[RubyInstaller](https://rubyinstaller.org/downloads/) **with Devkit**.  This
gives you access to GCC on the Windows command line as well as `pkgconf` for
getting the build flags.

{% highlight shell_session %} $ ridk enable # enable devkit $ pkgconf.exe
--cflags --libs C:\Ruby33-x64\lib\pkgconfig\ruby-3.3.pc # show GCC args $
gcc foo.c ...  {% endhighlight %}

Note that the GCC args might not be parsed correctly by PowerShell, so use
`cmd` instead.  Also the Ruby 3.3 installer is missing the lib location from
its `pkgconf` output for some reason, so you'll need to add the `-L` option
manually.  You can locate that with `RbConfig::CONFIG["libdir"]` as above;
the installer put it in `C:\Ruby33-x64\lib` for me.

Finally, Windows has no `rpath` so you will need to copy any linked DLLs
alongside the built executable for it to run.  That includes any DLLs needed
by Ruby itself.  The installer put those in
`C:\Ruby33-x64\bin\ruby_builtin_dlls` for me.

## 起動と終了 ##

RubyインタプリタをCやC++のプログラムに含めることはとても簡単です。
ヘッダーを含めて、
APIを使用する前にインタプリタを立ち上げるための関数を `main` で呼び、
そして完了後に後片付けをする関数を呼べばよいのです。

{% highlight c %}
{% include embed/simple.c %}
{% endhighlight %}

`ruby_init()`
の最中にVMが実行に失敗したら、エラーを表示してプログラムが終了してしまいます！もっと柔軟にエラーを出したいときは、代わりに失敗したときにゼロではない値を返す`ruby_setup()`
を使いましょう（残念ながら、この場合のエラーメッセージの出しかたはよくわかっていません[^err]）。

`rb_cleanup()` の最中にエラーが発生したときは、ゼロではない値を返します。
もしエラーが発生しなければ、渡した引数が返ります。
この仕様により、後片付けに失敗したときのエラーステータスを返す部分が少し短く書けます（先の例で実演したように）。

_技術的には_ `main` で `ruby_init` や `ruby_setup` を呼ぶ必要はありません。
しかし、RubyのVMは以降全てのRubyのコードが同じかこれより低層のスタックフレームから
実行されることを仮定しています（ガベージコレクションのためです）。
他の方法でも動くにせよ、
このことを確証する最も簡単な方法がプログラムのトップレベルで立ち上げを行うことなのです。
例えば深く入れ子になった関数でRubyを初期化して、沢山のスタックフレームを立ち上げ、
そして沢山のRubyのコードを実行するようなことはよくありません。
{: .alert .alert-danger}

後片付けをするときにも、VMはRubyのコードを評価するかもしれません（`at_exit` にブロックを渡したときなど）。
そしてそのときに例外が発生する可能性があります。
`ruby_cleanup()` はこのような例外が発生したときに、
ゼロではない値を返してエラーメッセージを表示することで制御します。
代わりに `ruby_finalize()` を呼ぶと、通常通り例外を発生させます。
（制御方法については[Exceptions](../c#rescue)節を参照）

別の例はこちらです。

{% highlight c %}
{% include embed/advanced.c %}
{% endhighlight %}

### 制約 ###

上記のスタックフレームの警告以外にも制約があります。
1つのプロセスに1つだけRubyのVMを動かせます。
起動と終了の方法を見ると、何度でもVMの破壊と創造を繰り返せるような気がしてくるかもしれませんが、
`ruby_cleanup` はRubyのコードが全ての後片付けが完了したことだけを確認します。
VMの状態を再度初期化できるような状態までは後片付けしません。
もう一度 `ruby_init` を呼び出すと、実行に失敗してしまうでしょう。

何かかの理由があってプログラムで複数のRubyのVMが必要になったら、
この制約を回避するために複数のプロセスに小分けにしなければいけません。

## VMを設定する ##

これでRubyのVMの実行の骨子を会得しました。
でも、Rubyのコードの実行に先駆けてもう少し設定したいことがあるかもしれません。
エラーメッセージとかのためにRubyのスクリプトの名前（例：`$0`）を設定したいときは、
以下のようにします。

{% highlight c %}
ruby_script("new name")
{% endhighlight %}

gemが `require` で呼び出せるようにするためにロードパスを設定するには、
次のようにします。

{% highlight c %}
ruby_init_loadpath()
{% endhighlight %}

VMにはコマンドラインで `ruby` するときと同じオプションを渡せます。
警告水準や冗長モード[^opt]の設定に手頃です。

{% highlight c %}
{% include embed/options.c %}
{% endhighlight %}

`ruby_options`への引数はmain関数と同じ`argc`と`argv`です。そして、`ruby`プログラムのmainと同じように、呼び出したときはVMは何らかのRubyのコードがあるものとしています。ロードするスクリプトのファイル名を与えていなかったり、`-e`で実行するコードがないときは、`stdin`から読み込もうとします。オプションを設定したいけれども、Rubyのコードを実行したく
_ない_ ときには、`"-e "`のように空行を渡せばよいです。

`ruby_options()` はコンパイルされたRubyのコードを表現する "node" を返します。
場合によっては（文法エラーとか）nodeが不正で実行すべきでないときがあります。
`ruby_executable_node()` はこのnodeを検査します。
nodeが妥当であれば、 `ruby_exec_node()` で実行できます。
`ruby_executable_node()` で（ポインタを介して）返る状態は、
コンパイルの最中やコードの実行時に例外が発生したら、ゼロではない値になります。
[例外を自前で読む](../c#rescue)こともできますし、
`ruby_cleanup()` に `state` を渡して適切なエラーメッセージを表示させることもできます。

Rubyは今のところコードの他のコンパイル・実行を別々にする方法を提供していません[^load]。

## やったね ##

これでRubyとやりとりできました！
[C API](../c)に戻りましょう。

## 脚註 ##

[^err]: `ruby_init()` uses `error_print()` to get an error message, but this
        function isn't exposed to the API. Is this a normal exception?

[^opt]: In my tests I couldn't get flags like `-w` and `-v` to do anything. This
        could be related to `ruby_prog_init()`. And really it should be possible
        to do this without parsing command line options.

[^load]: It looks like the function `rb_load_file()` should do this, but I
         haven't had any luck getting it to work.
